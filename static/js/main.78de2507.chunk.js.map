{"version":3,"sources":["components/TodosContext/TodosContext.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["TodosContext","React","createContext","todos","setTodos","TodosProvider","children","useState","JSON","parse","localStorage","getItem","contextValue","useMemo","Provider","value","TodoItem","todo","useContext","editableTitle","setEditableTitle","title","editedTodo","setEditedTodo","handleTitleChange","newTitle","prevTodos","map","item","id","completed","removeTodo","filter","saveEditedTodo","key","className","classNames","editing","type","onChange","checked","onDoubleClick","onClick","autoFocus","event","target","trimLeft","onKeyDown","onBlur","TodoList","getVisibleTodos","FILTERS","TodosFilter","memo","pathname","useLocation","to","toLowerCase","includes","TodoApp","setTitle","useEffect","setItem","stringify","todosStatus","every","activeTodos","onSubmit","preventDefault","newTodo","uuidv4","addTodo","placeholder","length","status","htmlFor","some","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78de2507.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\n\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype GlobalContent = {\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const TodosContext = React.createContext<GlobalContent>({\n  todos: [],\n  setTodos: () => [],\n});\n\nexport const TodosProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>(JSON.parse(localStorage.getItem('todos') || '[]'));\n\n  const contextValue = useMemo(() => {\n    return {\n      todos,\n      setTodos,\n    };\n  }, [todos]);\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { TodosContext } from '../TodosContext/TodosContext';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { setTodos } = useContext(TodosContext);\n  const [editableTitle, setEditableTitle] = useState(false);\n  const [editedTodo, setEditedTodo] = useState(todo.title);\n\n  const handleTitleChange = (newTitle = '') => {\n    setTodos((prevTodos: Todo[]) => (\n      [...prevTodos].map(item => {\n        if (item.id !== todo.id) {\n          return item;\n        }\n\n        if (newTitle) {\n          return {\n            ...item,\n            title: newTitle,\n          };\n        }\n\n        return {\n          ...item,\n          completed: !todo.completed,\n        };\n      })\n    ));\n  };\n\n  const removeTodo = () => {\n    setTodos((prevTodos: Todo[]) => (\n      [...prevTodos].filter(item => (\n        item.id !== todo.id\n      ))\n    ));\n  };\n\n  const editTitle = () => {\n    setEditableTitle(true);\n  };\n\n  const saveEditedTodo = (key: string) => {\n    if ((!editedTodo && key === 'Enter') || (!editedTodo && key === 'Blur')) {\n      removeTodo();\n    }\n\n    switch (key) {\n      case 'Blur':\n      case 'Enter':\n        handleTitleChange(editedTodo);\n        setEditableTitle(false);\n        break;\n\n      case 'Escape':\n        setEditedTodo(todo.title);\n        setEditableTitle(false);\n        break;\n\n      default:\n    }\n  };\n\n  return (\n    <li\n      className={classNames('todo-list__item', { completed: todo.completed === true }, { editing: editableTitle })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => (\n            handleTitleChange()\n          )}\n          checked={todo.completed}\n        />\n        <label\n          onDoubleClick={editTitle}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          aria-label=\"button-destroy\"\n          onClick={removeTodo}\n        />\n      </div>\n      {editableTitle && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={editedTodo}\n          // eslint-disable-next-line\n          autoFocus\n          onChange={(event) => (\n            setEditedTodo(event.target.value.trimLeft())\n          )}\n          onKeyDown={({ key }) => (\n            saveEditedTodo(key)\n          )}\n          onBlur={() => (\n            saveEditedTodo('Blur')\n          )}\n        />\n      )}\n    </li>\n  );\n};\n","import { TodoItem } from '../TodoItem/index';\n\ntype Props = {\n  getVisibleTodos: () => Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ getVisibleTodos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {getVisibleTodos().map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst FILTERS = ['All', 'Active', 'Completed'];\n\nexport const TodosFilter: React.FC = React.memo(() => {\n  const { pathname } = useLocation();\n\n  return (\n    <ul className=\"filters\">\n      {FILTERS.map(filter => (\n        <li\n          key={filter}\n          className=\"filters__item\"\n        >\n          <Link\n            to={filter === 'All' ? '/' : `/${filter.toLowerCase()}`}\n            className={classNames('filters__link', { 'filters__link--active': pathname.toLowerCase().includes(filter.toLowerCase()) || (!pathname.toLowerCase().includes('active') && !pathname.toLowerCase().includes('completed') && filter.toLowerCase() === 'all') })}\n          >\n            {filter}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n});\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { useLocation } from 'react-router-dom';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport { TodosContext } from '../TodosContext/TodosContext';\n\nexport const TodoApp: React.FC = () => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [title, setTitle] = useState('');\n  const { pathname } = useLocation();\n\n  const setLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  useEffect(() => {\n    setLocalTodos();\n  }, [todos]);\n\n  const addTodo = () => {\n    if (title === '') {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: uuidv4(),\n      title,\n      completed: false,\n    };\n\n    setTodos((prevTodos: Todo[]) => ([\n      ...prevTodos, newTodo,\n    ]));\n    setTitle('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    addTodo();\n  };\n\n  const handleTodosStatus = (status: boolean) => {\n    setTodos((prevTodos: Todo[]) => (\n      [...prevTodos].map(todo => {\n        return {\n          ...todo,\n          completed: status,\n        };\n      })\n    ));\n  };\n\n  const todosStatus = todos.every(todo => todo.completed === true);\n  const activeTodos = todos.filter(todo => todo.completed === false);\n\n  const getVisibleTodos = () => {\n    switch (pathname) {\n      case '/active':\n        return todos.filter(todo => !todo.completed);\n\n      case '/completed':\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  const removeCompletedTodos = () => {\n    setTodos((prevTodos: Todo[]) => (\n      [...prevTodos].filter(todo => (\n        todo.completed === false\n      ))\n    ));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>To do list</h1>\n\n        <form\n          onSubmit={handleSubmit}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={(event) => (\n              setTitle(event.target.value.trimLeft())\n            )}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggleAll\"\n            className=\"toggle-all\"\n            checked={todosStatus}\n            onChange={() => (\n              handleTodosStatus(!todosStatus)\n            )}\n          />\n          <label htmlFor=\"toggleAll\">\n            Mark all as complete\n          </label>\n          <TodoList\n            getVisibleTodos={getVisibleTodos}\n          />\n        </section>\n      )}\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {(activeTodos.length === 0 && (\n              'No items'\n            )) || (activeTodos.length === 1 && (\n              `${activeTodos.length} item is left`\n            )) || (activeTodos.length > 1 && (\n              `${activeTodos.length} items are left`\n            ))}\n          </span>\n\n          <TodosFilter />\n\n          {todos.some(todo => todo.completed === true) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={removeCompletedTodos}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n","import { TodoApp } from './components/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <TodoApp />\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { TodosProvider } from './components/TodosContext/TodosContext';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <TodosProvider>\n      <App />\n    </TodosProvider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}